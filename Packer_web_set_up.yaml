- hosts: all  ##niesetety ale nie da sie dynamicznie budowac obrazu 
  remote_user: ec2-user
  become: true
  vars:
    is_redhat: ansible_os_family == "RedHat"
    db_user: postgres
    db_password: malwinka
    db_name: netflix
  vars_files:
    - ../vars/aws_generated_vars.yaml
  tasks:
    - name: Make a file - myproject
      ansible.builtin.file:
        path: /home/ec2-user/myproject
        state: directory
        mode: '0755'
    - name: Make a file - templates
      ansible.builtin.file:
        path: /home/ec2-user/myproject/templates
        state: directory
        mode: '0755'
    - name: Make a file - sites-available for nginx
      ansible.builtin.file:
        path: "/home/ec2-user/etc/nginx/sites-available"
        state: directory
        mode: '0755'

    - name: Copy - templates and index 
      ansible.builtin.copy:
        src: "../vars/templates/index.html"
        dest: "/home/ec2-user/myproject/templates/index.html"      
    - name: Copy - main app to the host
      ansible.builtin.copy:
        src: "../vars/main.py"
        dest: "/home/ec2-user/myproject/main.py"
    - name: Copy - myproject.service to the host
      ansible.builtin.copy:
        src: "../vars/myproject.service"
        dest: "/etc/systemd/system/myproject.service"
    - name: Copy - wsgi.py to the host
      ansible.builtin.copy:
        src: "../vars/wsgi.py"
        dest: "/home/ec2-user/myproject/wsgi.py"

    - name: Install - Python & Postgres & Nginx
      package:
        name: "{{ item }}"
        state: present
      with_items:
          - postgresql15.x86_64
          - postgresql15-server
          - python3-psycopg2
          - python3-pip
          - net-tools
          - nc
          - python3-virtualenv
          - python3-setuptools
          - nginx

    - name: PostgreSQL - Check if is already initialized
      ansible.builtin.stat:
        path: "/var/lib/pgsql/data/pg_hba.conf"
      register: postgres_data
    - name: PostgreSQL - Initialize 
      shell: "postgresql-setup initdb"
      when: not postgres_data.stat.exists
    - name: Copy - pg_hba.conf 
      ansible.builtin.copy:
        src: ../vars/pb_hba.conf
        dest: /var/lib/pgsql/data/pg_hba.conf
    - name: PostgreSQL - restart
      service:
        name: postgresql
        state: restarted
      become: true
      become_user: root
  
    - name: Configure PostgreSQL to listen on all addresses
      ansible.builtin.lineinfile:
        path: /var/lib/pgsql/data/postgresql.conf
        regexp: '^#listen_addresses ='
        line: "listen_addresses = '*'"
        state: present
    - name: Retry PostgreSQL service start
      service:
        name: postgresql
        state: restarted
      become: true
      become_user: root
    - name: Python Enviroment - Create
      ansible.builtin.command: python3 -m venv /home/ec2-user/myproject/venv
      args:
        creates: /home/ec2-user/myproject/venv/bin/activate       
    - name: Python Enviroment - Upgrade
      ansible.builtin.command: /home/ec2-user/myproject/venv/bin/python3 -m pip install --upgrade pip
    - name: Python Enviroment - Install required Python packages
      command: /home/ec2-user/myproject/venv/bin/pip install psycopg2-binary wheel gunicorn flask

    - name: Install Nginx on Amazon Linux
      ansible.builtin.yum:
        name: nginx
        state: present
      when: ansible_os_family == "RedHat"

    - name: Create config file
      copy:
        content: |
          {
            "DB_USER": "{{ db_user }}",
            "DB_PASSWORD": "{{ db_password }}",
            "DB_NAME": "{{ db_name }}",
            "DB_IP_ADDRESS": "{{ db_ip_address }}"
          }
        dest: /home/ec2-user/myproject/config.json
    - name: Set permissions for the project directory
      file:
        path: /home/ec2-user/myproject
        owner: ec2-user
        group: ec2-user
        mode: '0755'
        recurse: yes

    - name: Start Nginx
      service:
        name: nginx
        state: started
    
    - name: Display db_ip_address
      debug:
        msg: "The IP address is {{ db_ip_address }}"
    - name: Create Nginx configuration file with dynamic values
      ansible.builtin.copy:
        content: |
          server {
              listen 80;
              server_name {{ web_ip_address }};

              location / {
                  proxy_pass http://localhost:5001;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }

              error_page 404 /404.html;
              location = /404.html {
              }

              error_page 500 502 503 504 /50x.html;
              location = /50x.html {
              }
          }
        dest: "/etc/nginx/conf.d/myproject.conf" 

    - name: Restart Nginx
      service:
        name: nginx
        state: restarted

    - name: Myproject.service - Start
      systemd:
        name: myproject.service
        state: started  
    - name: Myproject.service - Enable 
      systemd:
        name: myproject.service
        enabled: yes
    - name: Myproject.service - Check the status
      command: systemctl status myproject.service
      register: service_status
    - name: Myproject.service - Print the status
      debug:
        msg: "{{ service_status.stdout }}"

