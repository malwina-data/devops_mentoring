---
- name: Create AWS VPC, Subnets, and Security Groups
  hosts: localhost
  connection: local
  gather_facts: false
  module_defaults:
    group/aws:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      region: '{{ region }}'
  vars: 
    ansible_python_interpreter: /usr/local/bin/python3 
    key_file: "../vars/key.pem"
    inventory_file: "inventory.ini"
    s3_bucket: "netflix_titles"
    s3_object_key: "netflix_titles.csv"
  vars_files:
    - ../vars/aws_credentials.yaml

  tasks:
    - name: Create VPC
      amazon.aws.ec2_vpc_net:
        name: vpc
        state: present
        cidr_block: "10.0.0.0/16"
        resource_tags:
          Name: "vpc"
      register: ec2_vpc_net_result

    - name: Create Internet Gateway for VPC
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
        state: present
        tags:
          Name: "{{ igw_name }}"
      register: igw_result

    - name: Create Subnet for Web Instances in sa-east-1a
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
        az: "sa-east-1a"
        cidr: "10.0.1.0/24"
        state: present
        tags:
          Name: "web-subnet-sa-east-1a"
      register: web_subnet_sa_east_1a

    - name: Create Subnet for Web Instances in sa-east-1b
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
        az: "sa-east-1b"
        cidr: "10.0.2.0/24"
        state: present
        tags:
          Name: "web-subnet-sa-east-1b"
      register: web_subnet_sa_east_1b

    - name: Create Subnet for DB Instances in sa-east-1a
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
        az: "sa-east-1a"
        cidr: "10.0.3.0/24"
        state: present
        tags:
          Name: "db-subnet-sa-east-1a"
      register: db_subnet_sa_east_1a

    - name: Create VPC Public Route Table - Web
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
        state: present
        tags:
          Name: "{{ web_route_table_name }}"
        subnets: 
          - "{{ web_subnet_sa_east_1a.subnet.id }}"
          - "{{ web_subnet_sa_east_1b.subnet.id }}"
        routes:
          - dest: "0.0.0.0/0"
            gateway_id: "{{ igw_result.gateway_id }}"
      register: web_public_route_table

    - name: Create VPC Public Route Table - DB
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
        state: present
        tags:
          Name: "{{ db_route_table_name }}"
        subnets: 
          - "{{ db_subnet_sa_east_1a.subnet.id }}"
        routes:
          - dest: "0.0.0.0/0"
            gateway_id: "{{ igw_result.gateway_id }}"
      register: db_public_route_table

    - name: Create Security Group
      amazon.aws.ec2_group:
        vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
        name: "{{ security_group_name }}"
        description: "{{ security_group_name }}"
        state: present
        rules:
          - proto: tcp      
            ports: 
              - 22
            cidr_ip: "{{ port22_cidr_block }}"
            rule_desc: Allow SSH from the internet
          - proto: tcp
            ports: 
              - 5432
            cidr_ip: "{{ port22_cidr_block }}"
            rule_desc: allow PostgreSQL traffic from web subnet
          - proto: tcp
            ports: 
              - 5001
            cidr_ip: "{{ port22_cidr_block }}"
            rule_desc: Access for the app
          - proto: tcp
            ports: 
              - 80
            cidr_ip: "{{ port22_cidr_block }}"
            rule_desc: Access for Nginx
      register: security_group_results

    - name: Launch a new EC2 instance with db key pair
      community.aws.ec2_instance: 
        name: "db"
        key_name: "key"
        instance_type: t2.micro
        image_id: ami-04eeb630f180cea95
        wait: yes
        security_group: '{{ security_group_results.group_id }}'
        vpc_subnet_id: "{{ db_subnet_sa_east_1a.subnet.id }}" 
        network:
          assign_public_ip: true
      register: db_ec2

    - name: Wait for SSH to come up - db 
      amazon.aws.ec2_instance_info:
        instance_ids: "{{ db_ec2.instance_ids[0] }}"
      register: instance_info_db
      until: instance_info_db.instances[0].state.name == 'running'
      retries: 20
      delay: 10
    
    - name: Add db-instance to host group
      add_host:
        name: db
        groups: db-servers
        ansible_host: "{{ instance_info_db.instances[0].public_ip_address }}"
        ansible_user: ec2-user
        ansible_ssh_private_key_file: "{{ key_file }}"
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
      when: instance_info_db.instances[0].public_ip_address is defined
      register: db_ec2_public_ip

    - name: Launch a new EC2 instance with web key pair
      community.aws.ec2_instance: 
        name: "web_1a"
        key_name: "key"
        instance_type: t3.micro
        image_id: ami-04eeb630f180cea95
        wait: yes
        security_group: '{{ security_group_results.group_id }}'
        vpc_subnet_id: "{{ web_subnet_sa_east_1a.subnet.id }}" 
        network:
          assign_public_ip: true
      register: web_ec2_sa_east_1a

    - name: Wait for SSH to come up - web
      amazon.aws.ec2_instance_info:
        instance_ids: "{{ web_ec2_sa_east_1a.instance_ids[0] }}"
      register: instance_info_web
      until: instance_info_web.instances[0].state.name == 'running'
      retries: 20
      delay: 10
    
    - name: Add web-instance to host group
      add_host:
        name: web_1a
        groups: web_servers
        ansible_host: "{{ instance_info_web.instances[0].public_ip_address }}"
        ansible_user: ec2-user
        ansible_ssh_private_key_file: "{{ key_file }}"
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
      when: instance_info_web.instances[0].public_ip_address is defined
      register: web_ec2_public_ip_sa_east_1a



    - name: Launch a new EC2 instance with web key pair
      community.aws.ec2_instance: 
        name: "web_1b"
        key_name: "key"
        instance_type: t3.micro
        image_id: ami-04eeb630f180cea95
        wait: yes
        security_group: '{{ security_group_results.group_id }}'
        vpc_subnet_id: "{{ web_subnet_sa_east_1b.subnet.id }}" 
        network:
          assign_public_ip: true
      register: web_ec2_sa_east_1b
 
    - name: Wait for SSH to come up - web
      amazon.aws.ec2_instance_info:
        instance_ids: "{{ web_ec2_sa_east_1b.instance_ids[0] }}"
      register: instance_info_web
      until: instance_info_web.instances[0].state.name == 'running'
      retries: 20
      delay: 10
    
    - name: Add web-instance to host group
      add_host:
        name: web_1b
        groups: web_servers
        ansible_host: "{{ instance_info_web.instances[0].public_ip_address }}"
        ansible_user: ec2-user
        ansible_ssh_private_key_file: "{{ key_file }}"
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
      when: instance_info_web.instances[0].public_ip_address is defined
      register: web_ec2_public_ip_sa_east_1b

    - name: Save variables to file
      copy:
        content: |
          ---
          region: "{{ region }}"
          vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
          igw_id: "{{ igw_result.gateway_id }}"
          db_subnet_id: "{{ db_subnet_sa_east_1a.subnet.id }}"
          web_subnet_id: "{{ web_subnet_sa_east_1a.subnet.id }}"
          db_route_table_id: "{{ db_public_route_table.route_table.id }}"
          web_route_table_id: "{{ web_public_route_table.route_table.id }}"
          security_group_id: "{{ security_group_results.group_id }}"
        dest: "../vars/aws_generated_vars.yaml"

    - name: Create target group with health check settings
      community.aws.elb_target_group:
        name: my-target-group
        protocol: HTTP
        port: 80
        vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
        health_check_protocol: HTTP
        health_check_port: "80"
        health_check_path: "/health"  # Upewnij się, że ścieżka jest poprawna
        health_check_interval: 30
        health_check_timeout: 5
        healthy_threshold_count: 5
        unhealthy_threshold_count: 2
        successful_response_codes: "200"  # Użyj tego zamiast 'success_codes'
        state: present
        targets:
          - Id: "{{ web_ec2_sa_east_1a.instance_ids[0] }}"
            Port: 80
          - Id: "{{ web_ec2_sa_east_1b.instance_ids[0] }}"
            Port: 80
      register: target_group
    - debug:
        var: ec2_vpc_net_result.vpc.id
    - debug:
        var: web_ec2_sa_east_1a.instance_ids[0]
    - debug:
        var: web_ec2_sa_east_1b.instance_ids[0]

    - name: Create Application Load Balancer with Listener
      amazon.aws.elb_application_lb:
        name: my-load-balancer
        subnets: 
          - "{{ web_subnet_sa_east_1a.subnet.id }}"
          - "{{ web_subnet_sa_east_1b.subnet.id }}"
        security_groups:
          - "{{ security_group_results.group_id }}"
        state: present
        scheme: internet-facing
        listeners:
          - Protocol: HTTP
            Port: 80
            DefaultActions:
              - Type: forward
                TargetGroupArn: "{{ target_group.target_group_arn }}" # Użycie wcześniej utworzonej grupy docelowej
      register: alb

    - name: Create key pair
      amazon.aws.ec2_key:
        name: my-key
        region: '{{ region }}'
        state: present
      register: key_pair

    - name: Create an EC2 launch template if it doesn't exist
      community.aws.ec2_launch_template:
        name: "my-launch-template"
        image_id: "ami-04eeb630f180cea95"
        key_name: "my-key"
        instance_type: "t2.micro"
        security_group_ids: ["{{ security_group_results.group_id }}"]
        tags: 
          Key: "Name"
          Value: "auto_scaling_group_instance"
        version_description: "version 1"
      register: launch_template

    - debug:
        var: launch_template.default_template.launch_template_id



- hosts: web_1a
  remote_user: ec2-user
  become: true
  tasks:
    - name: Install - Nginx
      package:
        name: "{{ item }}"
        state: present
      with_items:
          - nginx
- hosts: web_1b
  remote_user: ec2-user
  become: true
  tasks:
    - name: Install - Nginx
      package:
        name: "{{ item }}"
        state: present
      with_items:
          - nginx



