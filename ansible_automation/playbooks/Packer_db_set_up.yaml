- hosts: all  # lub określ nazwę grupy z inventory, np. 'webservers'
  remote_user: ec2-user
  become: true
  become_method: sudo
  vars:
    is_redhat: ansible_os_family == "RedHat"
    db_user: postgres
    db_password: malwinka
    db_name: netflix
  vars_files:
    - ../vars/aws_generated_vars.yaml
  tasks:
    - name: Update yum cache
      yum:
        update_cache: yes

    - name: Install Python & Postgres
      package:
        name: "{{ item }}"
        state: present
      with_items:
        - postgresql15.x86_64
        - postgresql15-server
        - python3-psycopg2
        - python3-pip
        - net-tools
        - nc

    - name: Find out if PostgreSQL is initialized
      ansible.builtin.stat:
        path: "/var/lib/pgsql/data/pg_hba.conf"
      register: postgres_data

    - name: Initialize PostgreSQL
      shell: "postgresql-setup initdb"
      when: not postgres_data.stat.exists

    - name: Restart PostgreSQL service
      service:
        name: postgresql
        state: restarted

    - name: Copy CSV with data to remote host
      ansible.builtin.copy:
        src: "../vars/netflix_titles.csv"
        dest: "/tmp/netflix_titles.csv"

    - name: Copy pg_hba.conf to the server with proper limitations
      ansible.builtin.copy:
        src: ../vars/pb_hba.conf
        dest: /var/lib/pgsql/data/pg_hba.conf

    - name: Configure PostgreSQL to listen on all addresses
      ansible.builtin.lineinfile:
        path: /var/lib/pgsql/data/postgresql.conf
        regexp: '^#listen_addresses ='
        line: "listen_addresses = '*'"
        state: present

    - name: Restart PostgreSQL service
      service:
        name: postgresql
        state: restarted

    - name: Create app database
      community.postgresql.postgresql_db:
        name: "{{ db_name }}"
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        state: present
      become_user: postgres

    - name: Create table in PostgreSQL database
      become_user: postgres
      community.postgresql.postgresql_query:
        db: "{{ db_name }}"
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        query: |
          CREATE TABLE IF NOT EXISTS netflix_titles (
            show_id TEXT PRIMARY KEY,
            type TEXT,
            title TEXT,
            director TEXT,
            cast_0 TEXT,
            country TEXT,
            date_added DATE,
            release_year INTEGER,
            rating TEXT,
            duration TEXT,
            listed_in TEXT,
            description TEXT
          );

    - name: Delete existing data from netflix_titles
      become_user: postgres
      community.postgresql.postgresql_query:
        db: "{{ db_name }}"
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        query: "DELETE FROM netflix_titles;"

    - name: Load CSV data into PostgreSQL table
      become_user: postgres
      shell: |
        PGPASSWORD={{ db_password }} psql -U {{ db_user }} -d {{ db_name }} -c "\COPY netflix_titles FROM '/tmp/netflix_titles.csv' DELIMITER ',' CSV HEADER;"
      register: query_result

    - name: Restart PostgreSQL service
      service:
        name: postgresql
        state: restarted
