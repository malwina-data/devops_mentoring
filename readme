
This project contains an Ansible playbook that creates an AWS Virtual Private Cloud (VPC), subnets, security groups, and launches EC2 instances for a PostgreSQL database and a web application. It also configures the instances, deploys a Flask web application, and sets up Nginx as a reverse proxy.
Prerequisites

Before you run this playbook, ensure you have the following installed and configured:

    Ansible: Installed on your local machine. You can install it via pip:

    bash

pip install ansible

AWS CLI: Installed and configured with your AWS credentials. You can install it via pip:

bash

pip install awscli
aws configure

AWS Access and Secret Keys: You should have your AWS credentials saved in ../vars/aws_credentials.yaml.

The structure of aws_credentials.yaml should look like this:

yaml

aws_access_key: 'your_aws_access_key'
aws_secret_key: 'your_aws_secret_key'
region: 'your_aws_region'

Ansible Playbook Structure: Ensure your project directory structure is correct:

bash

    .
    ├── playbook.yaml           # The main playbook file
    ├── ../vars/                # Directory containing variables and supporting files
    │   ├── aws_credentials.yaml
    │   ├── key.pem
    │   ├── netflix_titles.csv
    │   ├── pg_hba.conf
    │   ├── templates/
    │   │   └── index.html
    │   ├── show.py
    │   ├── myproject_1.py
    │   ├── main.py
    │   ├── myproject.service
    │   └── wsgi.py
    ├── README.md               # This README file
    └── inventory.ini           # Auto-generated during playbook execution

Running the Playbook

    Set up the AWS infrastructure:

    The playbook will create a VPC, subnets, security groups, and EC2 instances. To run the playbook:

    bash

ansible-playbook playbook.yaml

Monitor the Playbook Execution:

The playbook will create two EC2 instances (for the database and web server), configure them, and deploy the Flask application. Ensure that no errors occur during execution.

Accessing the Web Application:

Once the playbook completes successfully, you can access the Flask application via the public IP address of the web EC2 instance. The IP address will be displayed in the Ansible output.

Example:

plaintext

    The IP address is 18.222.33.44

    You can now open a browser and navigate to http://18.222.33.44.

Troubleshooting

    Common Issues:
        AWS Credentials: Ensure your AWS credentials are correctly set in ../vars/aws_credentials.yaml.
        SSH Access: Ensure that the private key key.pem is correctly referenced and has appropriate permissions (chmod 400 key.pem).

    Debugging Playbook:
        If the playbook fails, check the output for any error messages and resolve them.
        You can add -vvv to the ansible-playbook command for more detailed output.

    Re-running Playbook:
        If you need to re-run the playbook, ensure that no conflicting resources (like VPCs or EC2 instances) are left from previous executions. You may need to clean up resources manually via the AWS Console.

Clean Up

After testing, ensure you terminate the EC2 instances and delete other AWS resources to avoid unnecessary charges:

bash

aws ec2 terminate-instances --instance-ids <instance-id>
aws ec2 delete-vpc --vpc-id <vpc-id>

Replace <instance-id> and <vpc-id> with the appropriate IDs.

Save the above content in a README.md file in your project directory. This file will serve as a comprehensive guide to using your Ansible playbook.
